// <auto-generated />
using System;
using FirstApp.DataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FirstApp.Migrations
{
    [DbContext(typeof(DictionaryContext))]
    [Migration("20230121064323_AddTranscription")]
    partial class AddTranscription
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_unicode_ci")
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("FirstApp.DataBase.Dictionary", b =>
                {
                    b.Property<int>("DictionaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("dictionary_id");

                    b.Property<int>("MiddleWords")
                        .HasColumnType("int(11)")
                        .HasColumnName("middle_words");

                    b.Property<int>("StrongWords")
                        .HasColumnType("int(11)")
                        .HasColumnName("strong_words");

                    b.Property<int>("WeakWords")
                        .HasColumnType("int(11)")
                        .HasColumnName("weak_words");

                    b.HasKey("DictionaryId")
                        .HasName("PRIMARY");

                    b.ToTable("dictionaries", (string)null);
                });

            modelBuilder.Entity("FirstApp.DataBase.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("user_id");

                    b.Property<int?>("DictionaryId")
                        .HasColumnType("int(11)")
                        .HasColumnName("dictionary_id");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("user_name");

                    b.Property<string>("UserPassword")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("user_password");

                    b.HasKey("UserId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "DictionaryId" }, "dictionary_id");

                    b.HasIndex(new[] { "UserName" }, "user_name")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("FirstApp.DataBase.Word", b =>
                {
                    b.Property<int>("WordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("word_id");

                    b.Property<string>("Transcript")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Translate")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("translate");

                    b.Property<string>("Word1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("word");

                    b.HasKey("WordId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Word1" }, "word")
                        .IsUnique();

                    b.ToTable("words", (string)null);
                });

            modelBuilder.Entity("FirstApp.DataBase.Wordsdictionary", b =>
                {
                    b.Property<int>("WordDictionaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("wordDictionary_id");

                    b.Property<int?>("DictionaryId")
                        .HasColumnType("int(11)")
                        .HasColumnName("dictionary_id");

                    b.Property<int?>("Progres")
                        .HasColumnType("int(100)")
                        .HasColumnName("progres");

                    b.Property<int?>("WordId")
                        .HasColumnType("int(11)")
                        .HasColumnName("word_id");

                    b.HasKey("WordDictionaryId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "DictionaryId" }, "dictionary_id")
                        .HasDatabaseName("dictionary_id1");

                    b.HasIndex(new[] { "WordId" }, "word_id");

                    b.ToTable("wordsdictionaries", (string)null);
                });

            modelBuilder.Entity("FirstApp.DataBase.User", b =>
                {
                    b.HasOne("FirstApp.DataBase.Dictionary", "Dictionary")
                        .WithMany("Users")
                        .HasForeignKey("DictionaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("users_ibfk_1");

                    b.Navigation("Dictionary");
                });

            modelBuilder.Entity("FirstApp.DataBase.Wordsdictionary", b =>
                {
                    b.HasOne("FirstApp.DataBase.Dictionary", "Dictionary")
                        .WithMany("Wordsdictionaries")
                        .HasForeignKey("DictionaryId")
                        .HasConstraintName("wordsdictionaries_ibfk_1");

                    b.HasOne("FirstApp.DataBase.Word", "Word")
                        .WithMany("Wordsdictionaries")
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("wordsdictionaries_ibfk_2");

                    b.Navigation("Dictionary");

                    b.Navigation("Word");
                });

            modelBuilder.Entity("FirstApp.DataBase.Dictionary", b =>
                {
                    b.Navigation("Users");

                    b.Navigation("Wordsdictionaries");
                });

            modelBuilder.Entity("FirstApp.DataBase.Word", b =>
                {
                    b.Navigation("Wordsdictionaries");
                });
#pragma warning restore 612, 618
        }
    }
}
